# This is a basic workflow to help you get started with Actions

name: Convert ROR json to ttl

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      # - name: Run a one-line script
      #   run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Generate releases info from UPDATES only
        run: |
          echo "📁 Génération du JSON basé sur ror-updates uniquement..."
          
          sudo apt-get update && sudo apt-get install -y jq
          
          echo '{}' > releases_info.json
          
          # Ne traiter que les versions qui existent dans ror-updates ET dans notre repo local
          for version in $(ls -d v* 2>/dev/null | sort -V); do
            # Tester si cette version existe dans ror-updates via l'API spécifique
            echo "🔍 Vérification de $version..."
            api_response=$(curl -s "https://api.github.com/repos/ror-community/ror-updates/releases/tags/$version")
            
            # Vérifier si la version existe (pas de message "Not Found")
            if echo "$api_response" | jq -e '.message' > /dev/null 2>&1; then
              error_message=$(echo "$api_response" | jq -r '.message')
              if [ "$error_message" = "Not Found" ]; then
                echo "⏭️  Skipping $version (absente de ror-updates)"
                continue
              fi
            fi
            
            # Si on arrive ici, la version existe dans ror-updates
            echo "🎯 Traitement de $version (présente dans ror-updates)..."
            
            # Récupérer la date depuis la réponse API
            release_date=$(echo "$api_response" | jq -r '.created_at')
            
            # Récupérer les IDs ROR
            ror_ids=()
            if [ -d "$version" ] && [ "$(ls -A "$version"/*.json 2>/dev/null)" ]; then
              for file in "$version"/*.json; do
                if [ -f "$file" ]; then
                  ror_id=$(basename "$file" .json)
                  ror_ids+=("$ror_id")
                fi
              done
            fi
            
            # Mettre à jour le JSON
            jq --arg version "$version" \
               --arg date "$release_date" \
               --argjson ids "$(printf '%s\n' "${ror_ids[@]}" | jq -R . | jq -s .)" \
               '.[$version] = {
                 created_at: $date,
                 ror_ids: $ids,
                 count: ($ids | length)
               }' releases_info.json > temp.json && mv temp.json releases_info.json
            
            echo "  ✅ $version: ${#ror_ids[@]} fichiers, date: $release_date"
          done
          
          echo ""
          echo "📊 Résumé final (uniquement les releases de ror-updates):"
          jq 'to_entries | map("\(.key): \(.value.count) fichiers") | .[]' releases_info.json
