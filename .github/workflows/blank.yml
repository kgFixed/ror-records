# This is a basic workflow to help you get started with Actions

name: Convert ROR json to ttl

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      # - name: Run a one-line script
      #   run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo "üìÅ G√©n√©ration du fichier JSON des releases..."
          
          sudo apt-get update && sudo apt-get install -y jq
          
          # Initialiser un tableau JSON
          echo '{}' > releases_info.json
          
          for version in $(ls -d v* 2>/dev/null | sort -V); do
            echo "üéØ Traitement de $version..."
            
            # API call avec gestion d'erreur
            release_info=$(curl -s -f "https://api.github.com/repos/ror-community/ror-updates/releases/tags/$version")
            
            if [ $? -ne 0 ] || [ -z "$release_info" ]; then
              release_date="null"
              echo "  ‚ö†Ô∏è  Release non trouv√©e via API"
            else
              release_date=$(echo "$release_info" | jq -r '.created_at' 2>/dev/null)
              if [ "$release_date" = "null" ] || [ -z "$release_date" ]; then
                release_date="null"
                echo "  ‚ö†Ô∏è  Date non trouv√©e"
              else
                echo "  üìÖ Date: $release_date"
              fi
            fi
            
            # R√©cup√©rer les IDs ROR
            ror_ids=()
            if [ -d "$version" ]; then
              for file in "$version"/*.json; do
                if [ -f "$file" ]; then
                  ror_id=$(basename "$file" .json)
                  ror_ids+=("$ror_id")
                fi
              done
            fi
            
            echo "  üìä Fichiers: ${#ror_ids[@]}"
            
            # Mettre √† jour le JSON
            jq --arg version "$version" \
               --arg date "$release_date" \
               --argjson ids "$(printf '%s\n' "${ror_ids[@]}" | jq -R . | jq -s .)" \
               '.[$version] = {
                 created_at: ($date | if . == "null" then null else . end),
                 ror_ids: $ids,
                 count: ($ids | length)
               }' releases_info.json > temp.json && mv temp.json releases_info.json
            
          done
          
          echo ""
          echo "‚úÖ Fichier releases_info.json g√©n√©r√© avec succ√®s!"
          echo "üìä R√©sum√©:"
          jq 'to_entries | map("\(.key): \(.value.count) fichiers") | .[]' releases_info.json

      - name: Upload releases info JSON
        uses: actions/upload-artifact@v4
        with:
          name: releases-info
          path: releases_info.json
