# This is a basic workflow to help you get started with Actions

name: Convert ROR json to ttl

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  check-diff:
    name: 🔍 Vérification des différences
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Check for differences
        id: check
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "🔍 Vérification des différences..."
          
          sudo apt-get update && sudo apt-get install -y jq
          mkdir -p json
          
          if [ ! -f "json/releases.json" ]; then
            echo "📄 Aucun fichier existant - changements nécessaires"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Vérification rapide du nombre de versions
          local_versions=$(ls -d v* 2>/dev/null | wc -l)
          existing_versions=$(jq 'length' json/releases.json 2>/dev/null || echo "0")
          
          if [ "$local_versions" -ne "$existing_versions" ]; then
            echo "🔄 Différence détectée: $local_versions vs $existing_versions versions"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Aucune différence détectée"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

  generate-releases:
    name: 📁 Génération des releases
    needs: check-diff
    if: needs.check-diff.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.PAT_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Generate releases JSON
        run: |
          echo "📁 Génération du JSON basé sur ror-updates uniquement..."
          
          sudo apt-get update && sudo apt-get install -y jq
          
          # Créer le dossier json s'il n'existe pas
          mkdir -p json
          echo '{}' > json/releases.json
          echo '{}' > temp_all_releases.json
          
          processed=0
          skipped=0
          
          for version in $(ls -d v* 2>/dev/null); do
            echo "🔍 Vérification de $version..."
           api_response=$(curl -s -H "Authorization: token $GH_TOKEN" "https://api.github.com/repos/ror-community/ror-updates/releases/tags/$version")
            
            if echo "$api_response" | jq -e '.message == "Not Found"' > /dev/null 2>&1; then
              echo "⏭️  Skipping $version (absente de ror-updates)"
              skipped=$((skipped + 1))
              continue
            fi
            
            echo "🎯 Traitement de $version..."
            release_date=$(echo "$api_response" | jq -r '.created_at')
            
            ror_ids=()
            if [ -d "$version" ] && [ "$(ls -A "$version"/*.json 2>/dev/null)" ]; then
              for file in "$version"/*.json; do
                [ -f "$file" ] && ror_ids+=("$(basename "$file" .json)")
              done
            fi
            
            jq --arg v "$version" \
               --arg d "$release_date" \
               --argjson i "$(printf '%s\n' "${ror_ids[@]}" | jq -R . | jq -s .)" \
               '.[$v] = {created_at: $d, ror_ids: $i, count: ($i | length)}' \
               temp_all_releases.json > temp_single.json && mv temp_single.json temp_all_releases.json
            
            echo "  ✅ $version: ${#ror_ids[@]} fichiers"
            processed=$((processed + 1))
          done

          # Lire le fichier temporaire et écrire dans le fichier final
          jq 'to_entries | sort_by(.value.created_at) | reverse | from_entries' temp_all_releases.json > json/releases.json
          
          # echo ""
          # echo "📊 Résumé:"
          # echo "  - ✅ Traitées: $processed versions"
          # echo "  - ⏭️  Ignorées: $skipped versions"
          # echo "  - 📁 Fichier: json/releases.json"
          
          # # Afficher le contenu du fichier généré
          # echo ""
          # echo "📄 Contenu de json/releases.json:"
          # cat json/releases.json
      
      - name: Commit and push releases.json
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "🚀 Commit et push avec PAT..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Configurer l'URL avec le token
          git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git
          
          git add json/releases.json
          
          if git diff --staged --quiet; then
            echo "⏭️  Aucun changement à commiter"
          else
            git commit -m "Update releases.json with ROR versions data"
            git push
            echo "✅ Fichier json/releases.json commité et poussé"
          fi

  no-changes:
    name: ⏭️ Aucun changement
    needs: check-diff
    if: needs.check-diff.outputs.has_changes == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: No changes message
        run: echo "✅ Aucune différence - Pas d'action nécessaire"
