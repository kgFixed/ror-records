name: Manual deploy to Prod
on:
  workflow_dispatch:
    inputs:
      schema-version:
        required: true
        description: Schema version
        type: choice
        options:
        - v1
        - v2
      release-tag:
        type: string
        required: true
        description: Name of the release tag that you would like to deploy to PROD

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

jobs:
  check_permission:
    runs-on: ubuntu-latest
    if: github.event.ref == 'refs/heads/main'
    steps:
      - name: Get Permission
        uses: octokit/request-action@v2.x
        id: get_permission
        with:
          route: GET /repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: output
        run:  |
          export role_name=${{ fromJson(steps.get_permission.outputs.data).role_name }}
          if [[ "$role_name" == "maintain"  || "$role_name" == "admin" ]]; then
            exit 0
          else
            exit 1
          fi
  copy-files:
    runs-on: ubuntu-latest
    if: github.event.ref == 'refs/heads/main'
    needs: check_permission
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          ref: refs/tags/${{ github.event.inputs.release-tag }}
      - name: Install aws cli
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1.0.2
      - name: Zip and copy files
        id: copyfiles
        run: |
          cd ./${{ github.event.inputs.release-tag }}
          zip files.zip *.json
          aws s3 cp files.zip s3://${{ secrets.ROR_DATA_S3_BUCKET_PROD }}/${{ github.event.inputs.release-tag }}-${{ github.event.inputs.schema-version }}/files.zip
          aws s3 ls s3://${{ secrets.ROR_DATA_S3_BUCKET_PROD }}/${{ github.event.inputs.release-tag }}-${{ github.event.inputs.schema-version }}/files.zip
      - name: Notify Slack
        if: always()
        uses: edge/simple-slack-notify@master
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.CURATOR_SLACK_WEBHOOK_URL }}
        with:
          channel: '#ror-curation-releases'
          color: 'good'
          text: 'Copy status to PROD S3 Bucket:  ${{ steps.copyfiles.outcome }}.  Using version: ${{ github.event.inputs.schema-version }}. From directory: ${{ github.event.inputs.release-tag }}. Please check: ${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}'
      - name: Index file
        id: indexdata
        run: |
          cd .github/workflows
          python -m pip install --upgrade pip
          pip install requests==2.23.0
          if [[ ${{ github.event.inputs.schema-version }} == 'v1' ]]; then
            python index_files.py -u ${{ secrets.INDEX_PROD_API_URL_V1 }} -d ${{ github.event.inputs.directory-name }}-v1 -he ${{ secrets.INDEX_DEV_API_HEADERS }}
          fi
          if [[ ${{ github.event.inputs.schema-version }} == 'v2' ]]; then
            python index_files.py -u ${{ secrets.INDEX_PROD_API_URL_V2 }} -d ${{ github.event.inputs.directory-name }}-v2 -he ${{ secrets.INDEX_DEV_API_HEADERS }}
          fi
      - name: Notify Slack
        if: always()
        uses: edge/simple-slack-notify@master
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.CURATOR_SLACK_WEBHOOK_URL }}
        with:
          channel: '#ror-curation-releases'
          color: 'good'
          text: 'PROD index status to ES: ${{ steps.indexdata.outcome }}. Using version:. From directory: ${{ github.event.inputs.release-tag }}. Please check: ${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}'

